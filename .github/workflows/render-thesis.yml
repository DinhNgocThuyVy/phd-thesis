name: Render Quarto Thesis

on:
  # Trigger on push to main branch
  push:
    branches: [ main, master ]
  
  # Trigger on pull requests (HTML only for testing)
  pull_request:
    branches: [ main, master ]

env:
  QUARTO_VERSION: "1.4.555"
  PYTHON_VERSION: "3.11"

jobs:
  # Fast HTML rendering for regular commits (without [release])
  render-html:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'push' && !contains(github.event.head_commit.message, '[release]')
    permissions:
      contents: write
      pages: write
      id-token: write
    steps:
    - name: Check out repository
      uses: actions/checkout@v4

    - name: Set up Quarto
      uses: quarto-dev/quarto-actions/setup@v2
      with:
        version: ${{ env.QUARTO_VERSION }}

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: requirements.txt

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip wheel setuptools
        if [ -f requirements.txt ]; then
          echo "Installing dependencies from requirements.txt..."
          pip install -r requirements.txt
        else
          echo "Installing essential packages..."
          pip install pandas matplotlib numpy jupyter ipython jupyter-cache
        fi

    - name: Render and Publish to GitHub Pages
      uses: quarto-dev/quarto-actions/publish@v2
      with:
        target: gh-pages
        render: html
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Full rendering (HTML + PDF) for release commits
  render-release:
    runs-on: ubuntu-latest
    timeout-minutes: 25    
    if: contains(github.event.head_commit.message, '[release]')
    permissions:
      contents: write
      pages: write
      id-token: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Quarto
      uses: quarto-dev/quarto-actions/setup@v2
      with:
        version: ${{ env.QUARTO_VERSION }}

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: requirements.txt

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip wheel setuptools
        if [ -f requirements.txt ]; then
          echo "Installing dependencies from requirements.txt..."
          pip install -r requirements.txt
        else
          echo "Installing essential packages..."
          pip install pandas matplotlib numpy jupyter ipython jupyter-cache
        fi    
        
    # Cache TinyTeX installation for PDF rendering
    - name: Cache TinyTeX
      id: cache-tinytex
      uses: actions/cache@v4
      with:
        path: ~/.TinyTeX
        key: tinytex-${{ runner.os }}-complete-v3
        restore-keys: |
          tinytex-${{ runner.os }}-complete-

    # Install TinyTeX for PDF rendering
    - name: Set up TinyTeX
      uses: r-lib/actions/setup-tinytex@v2
    # Install LaTeX packages (only if cache miss)
    - name: Install LaTeX packages for thesis
      if: steps.cache-tinytex.outputs.cache-hit != 'true'
      run: |
        echo "Installing comprehensive LaTeX packages for thesis (first run or cache miss)..."
        echo "This may take several minutes but will be cached for future runs..."
        
        tlmgr update --self
        echo "Installing ALL required packages for thesis template..."
        tlmgr install \
          koma-script \
          scrhack \
          setspace \
          setspaceenhanced \
          caption \
          soul \
          hologo \
          csquotes \
          etoolbox \
          babel \
          parskip \
          booktabs \
          hyperref \
          geometry \
          amsmath \
          amsfonts \
          pdfpages \
          adjustbox \
          multirow \
          float \
          xcolor \
          natbib \
          biblatex \
          microtype \
          titlesec \
          enumitem \
          makecell \
          tcolorbox \
          tikzfill \
          pdfcol \
          fontawesome5 \
          floatbytocbasic \
          pdflscape \
          lscapeenhanced \
          colortbl \
          environ \
          trimspaces \
          pgf \
          xkeyval \
          collectbox \
          ltxcmds \
          varwidth \
          pgfplots \
          fontspec \
          xunicode \
          xltxtra \
          realscripts \
          metalogo \
          ifmtarg
          
        echo "Installing LaTeX collections for comprehensive coverage..."
        tlmgr install \
          collection-fontsrecommended \
          collection-latexextra \
          collection-bibtexextra \
          collection-mathscience \
          collection-pictures
          
        echo "LaTeX packages installation completed!"
        echo "Total packages installed: $(tlmgr list --only-installed | wc -l)"
        
    # Quick update for cached TinyTeX    
    - name: Update TinyTeX (cache hit)
      if: steps.cache-tinytex.outputs.cache-hit == 'true'
      run: |
        echo "TinyTeX cache hit - packages already installed!"
        echo "Current installed packages: $(tlmgr list --only-installed | wc -l)"
        echo "No additional installation needed - all packages pre-cached!"

    # Render both HTML and PDF for release
    - name: Render HTML and PDF
      run: |
        echo "Rendering both HTML and PDF for release..."
        
        # First render HTML
        echo "Rendering HTML..."
        quarto render --to html
        
        # Then render PDF with retry logic
        echo "Rendering PDF..."
        for attempt in 1 2 3; do
          echo "PDF rendering attempt $attempt..."
          if quarto render --to pdf; then
            echo "PDF rendering successful!"
            break
          else
            echo "PDF rendering failed on attempt $attempt"
            if [ $attempt -eq 3 ]; then
              echo "All attempts failed. Checking logs..."
              find . -name "*.log" -exec tail -20 {} \; 2>/dev/null || echo "No log files found"
              exit 1
            fi
            sleep 5
          fi
        done
        
        # Copy PDF to docs directory for GitHub Pages
        echo "Copying PDF to docs directory for GitHub Pages..."
        if [ -f "docs/My-Thesis.pdf" ]; then
          echo "PDF already in docs directory"
        elif [ -f "My-Thesis.pdf" ]; then
          cp "My-Thesis.pdf" docs/
          echo "PDF copied to docs directory"
        else
          echo "Warning: Main thesis PDF not found"
        fi
        
        # Prepare PDF for release artifacts
        mkdir -p release_assets
        if [ -f "docs/My-Thesis.pdf" ]; then
          cp "docs/My-Thesis.pdf" release_assets/
          echo "PDF prepared for release"
        fi

    # Deploy to GitHub Pages (includes both HTML and PDF)
    - name: Deploy to GitHub Pages
      uses: quarto-dev/quarto-actions/publish@v2
      with:
        target: gh-pages
        render: false  # Already rendered above
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Upload PDF artifacts
    - name: Upload PDF artifacts
      uses: actions/upload-artifact@v4
      with:
        name: thesis-pdf-${{ github.sha }}
        path: release_assets/
        retention-days: 30

    # Create Release with PDF
    - name: Create Release with PDF
      if: github.ref == 'refs/heads/main' && success()
      uses: softprops/action-gh-release@v1
      with:
        tag_name: thesis-v${{ github.run_number }}
        name: Thesis Release v${{ github.run_number }}
        body: |
          üéì **Automated Thesis Release**
          
          Generated from commit: ${{ github.sha }}
          Branch: ${{ github.ref_name }}
          
          üìù **Changes:** ${{ github.event.head_commit.message }}
          üìÖ **Date:** ${{ github.event.head_commit.timestamp }}
          
          **Content:**
          - üìÑ PDF thesis available as release asset
          - üåê HTML version deployed to GitHub Pages
          
          **Technical specs:**
          - Quarto ${{ env.QUARTO_VERSION }}
          - Python ${{ env.PYTHON_VERSION }}
          - Custom MastersDoctoralThesis class
          - Full LaTeX package support
        files: release_assets/*.pdf
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}